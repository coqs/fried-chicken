--wallah I gave you guys time to get inspiration and I guess you oribably did now take this
--FILL THIS IN (to get the actual source code)




-- Load the DrRay UI Library
local DrRayLibrary = loadstring(game:HttpGet("FILL_THIS_IN"))()

-- Create the window and tab
local window = DrRayLibrary:Load("FILL_THIS_IN", "Default")
local tab = DrRayLibrary.newTab("FILL_THIS_IN", "ImageIdHere")

-- Define initial hitbox settings
local hitboxSize = Vector3.new(FILL_THIS_IN, FILL_THIS_IN, FILL_THIS_IN)  -- Default hitbox size
local hitboxTransparency = FILL_THIS_IN  -- Default transparency
local espEnabled = FILL_THIS_IN  -- ESP initially off
local radius = FILL_THIS_IN  -- Default radius
local trackedParts = FILL_THIS_IN  -- To keep track of expanded hitboxes

-- Define ESP colors and settings
local espFillColor = Color3.fromRGB(FILL_THIS_IN, FILL_THIS_IN, FILL_THIS_IN)  -- Fill color for ESP
local espOutlineColor = Color3.fromRGB(FILL_THIS_IN, FILL_THIS_IN, FILL_THIS_IN)  -- Outline color for ESP
local espFillTransparency = FILL_THIS_IN
local espOutlineTransparency = FILL_THIS_IN

-- Parts to ignore in the hitbox expansion
local ignoredParts = FILL_THIS_IN

-- Function to apply ESP
local function applyESP(part)
    if not part then return end
    local highlight = part:FindFirstChildOfClass(FILL_THIS_IN)
    if not highlight then
        highlight = Instance.new(FILL_THIS_IN)
        highlight.Parent = FILL_THIS_IN
        highlight.FillColor = espFillColor
        highlight.OutlineColor = espOutlineColor
        highlight.FillTransparency = espFillTransparency
        highlight.OutlineTransparency = espOutlineTransparency
    end
    highlight.Adornee = FILL_THIS_IN
    highlight.Enabled = espEnabled
end

-- Function to remove ESP
local function removeESP(part)
    local highlight = part:FindFirstChildOfClass(FILL_THIS_IN)
    if highlight then
        highlight:Destroy()
    end
end

-- Function to expand hitbox
local function expandHitbox(part)
    if not part then return end
    part.Size = hitboxSize
    part.Transparency = hitboxTransparency
    part.CanCollide = FILL_THIS_IN
end

-- Function to reset hitbox
local function resetHitbox(part)
    if not part then return end
    part.Size = Vector3.new(FILL_THIS_IN, FILL_THIS_IN, FILL_THIS_IN)
    part.Transparency = FILL_THIS_IN
    part.CanCollide = FILL_THIS_IN
end

-- Function to define the area for hitbox expansion
local function getRegion()
    local player = game.Players.LocalPlayer
    local position = player.Character.HumanoidRootPart.Position
    return Region3.new(position - Vector3.new(FILL_THIS_IN, FILL_THIS_IN, FILL_THIS_IN), position + Vector3.new(FILL_THIS_IN, FILL_THIS_IN, FILL_THIS_IN))
end

-- Function to handle NPC hitbox expansion
local function handleHitboxes()
    local player = game.Players.LocalPlayer
    local region = getRegion()
    local partsInRegion = workspace:FindPartsInRegion3(FILL_THIS_IN, nil, math.huge)

    for _, part in ipairs(partsInRegion) do
        local model = part:FindFirstAncestorWhichIsA("FILL_THIS_IN")
        if model and model:FindFirstChild("HumanoidRootPart") and model ~= player.Character then
            local hitboxPart = model:FindFirstChild("HumanoidRootPart")
            if hitboxPart then
                expandHitbox(hitboxPart)
                if espEnabled then
                    applyESP(hitboxPart)
                end
                trackedParts[hitboxPart] = true
            end
        end
    end

    -- Reset hitboxes and remove ESP if they're out of range
    for part, _ in pairs(trackedParts) do
        local distance = (part.Position - player.Character.HumanoidRootPart.Position).Magnitude
        if distance > FILL_THIS_IN then
            resetHitbox(part)
            removeESP(part)
            trackedParts[part] = nil
        end
    end
end

-- Function to handle transparency levels for sliders
local function handleTransparency(level)
    if level < 0.25 then
        return FILL_THIS_IN
    elseif level < 0.75 then
        return FILL_THIS_IN
    elseif level < 1.25 then
        return FILL_THIS_IN
    elseif level < 1.75 then
        return FILL_THIS_IN
    else
        return FILL_THIS_IN
    end
end

-- Create UI components: sliders and toggles
tab.newSlider("Hitbox Size", "Adjust the size of NPC hitboxes", FILL_THIS_IN, false, function(value)
    hitboxSize = Vector3.new(value, value, value)
end)

tab.newSlider("Hitbox Transparency", "Adjust the transparency of NPC hitboxes", FILL_THIS_IN, false, function(value)
    hitboxTransparency = handleTransparency(value)
end)

tab.newToggle("ESP Toggle", "Toggle ESP (red mark on NPCs)", false, function(state)
    espEnabled = state
end)

-- NPC Handler Loop
spawn(function()
    while true do
        handleHitboxes()
        wait(FILL_THIS_IN)
    end
end)
